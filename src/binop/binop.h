/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   binop.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ehosta <ehosta@student.42lyon.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/13 20:51:43 by ehosta            #+#    #+#             */
/*   Updated: 2025/01/13 23:18:57 by ehosta           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef ALGOS_BINOPS_H
# define ALGOS_BINOPS_H

typedef unsigned int	t_uint;

t_uint	getbit_uint(t_uint x, t_uint pos);
t_uint	setbit_uint(t_uint x, t_uint pos, t_uint val);
t_uint	revbit_uint(t_uint x, t_uint pos);

t_uint	createmask_uint(t_uint x, t_uint start, t_uint length);
t_uint	setbit_uint(t_uint x, t_uint pos, t_uint val);
t_uint	setbitfield_uint(t_uint x, t_uint val, t_uint start, t_uint length);

t_uint	lshift_uint(t_uint x, t_uint shift);
t_uint	rshift_uint(t_uint x, t_uint shift);

/**
 * The AND operator. Returns the int generated by the AND operator on each
 * byte of both numbers. Example:
 * and_uint(26, 54) => 11010 & 110110
 * 					=> 10010
 * 					=> 18
 * @param x The first integer.
 * @param y The second integer.
 * @return The integer result of the binary operation.
 */
t_uint	and_uint(t_uint x, t_uint y);

/**
 * The OR operator. Returns the int generated by the OR operator on each
 * byte of both numbers. Example:
 * or_uint(162, 24) => 10100010 | 11000
 * 					=> 10111010
 * 					=> 186
 * @param x The first integer.
 * @param y The second integer.
 * @return The integer result of the binary operation.
 */
t_uint	or_uint(t_uint x, t_uint y);

/**
 * The XOR operator. Returns the int generated by the XOR operator on each
 * byte of both numbers. Example:
 * xor_uint(162, 186) => 10100010 ^ 10111010
 * 					  => 11000
 * 					  => 24
 * @param x The first integer.
 * @param y The second integer.
 * @return The integer result of the binary operation.
 */
t_uint	xor_uint(t_uint x, t_uint y);

/**
 * Reverse the bits of an integer. Returns the int generated by this
 * operation. Example:
 * rev_uint(1451130240) => ~1010110011111100111110110000000
 * 						=> 10101001100000011000001001111111
 * 						=> 2843837055
 * @param x The integer to invert the bits.
 * @return The integer result of the binary operation.
 */
t_uint	rev_uint(t_uint x);

#endif